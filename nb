#!/usr/bin/bash
set -e
shopt -s extglob

: "${XDG_CONFIG_HOME:="$HOME/.config"}"
: "${CONFIG_PATH:="$XDG_CONFIG_HOME/nb/config.json"}"
: "${GITHUB_USER:="$USER"}"
: "${REPOS_DIR:="$HOME/repos"}"
: "${NOTEBOX_ROOT_DIR:="$REPOS_DIR/github.com/$GITHUB_USER/notebox"}"
: "${EDITOR:=vim}"
: "${EXE:="${0##*/}"}"

# ---------------------------------Config---------------------------------

config.current_repo(){
  jq -r '.current_repo' "$CONFIG_PATH"
}

config.current_repo.set_to(){
  local to tempConf
  to="$1"
  
  tempConf="$(mktemp)"
  jq ".current_repo = \"$to\"" "$CONFIG_PATH" >"$tempConf"
  mv "$tempConf" "$CONFIG_PATH"
}

config.repos(){
  jq '.repos[]' "$CONFIG_PATH"
}

config.repos.add() {
  local obj
  obj="$1"

  local tempConf
  tempConf="$(mktemp)"

  jq ".repos += [$obj]" "$CONFIG_PATH" >"$tempConf"
  mv "$tempConf" "$CONFIG_PATH"
}

config.repos.with_name() {
  local reponame
  reponame="$1"

  jq ".repos[] | select(.name | contains(\"$reponame\"))" "$CONFIG_PATH"
}


# ------------------------------------------------------------------------

x.get() {
  local arg="$*"
  if [[ $arg =~ ^[0-9]{14,}$ ]]; then
    echo "$1"
  elif [[ $arg = last ]]; then
    last="$(x.last)"
    [[ -n "$last" ]] && echo "$last"
  else
    mapfile -t matches < <(x.search "$@")
    (( ${#matches[@]} > 0 )) || return 1
    if (( ${#matches[@]} == 1 )); then
      echo "${matches[0]%% *}"
      return
    fi
    select match in "${matches[@]}"; do
      echo "${match%% *}"
      return $?
    done
  fi
}

_init() {
  # check if we have a config in the right place, otherwise create it
  if [[ ! -s $CONFIG_PATH ]]; then 
    mkdir -p "${CONFIG_PATH%/*}"
    echo '{"repos":[],"current_repo": ""}' >"$CONFIG_PATH"
  fi
}

x.repo.add() {
  local reponame reporoot repogit
  reponame="$1"
  [[ -z $reponame ]] && echo "Please Provide notebox name" && exit 1
  read -rp "Enter Repo Root Directory: " reporoot
  read -rp "Enter Repo Git Remote: " repogit

  local obj
  obj="{\"name\":\"$reponame\",\"root\":\"$reporoot\",\"git\":\"$repogit\"} "

  config.repos.add "$obj"

  echo
  echo "Added:"
  config.repos.with_name "$reponame"
}

x.repo.switch() {
  local reponame
  reponame="$1"
  [[ -z $reponame ]] && echo "Please Provide notebox name" && exit 1

  config.current_repo.set_to "$reponame"

  echo "Switched to $reponame notebox at $(x.dir)"
}

x.repo() {
  config.current_repo
}

x.dir(){
  local current_repo repo_dir
  current_repo=$(config.current_repo)
  [[ -z $current_repo ]] && echo "ERROR: No current notebox defined" && exit 1

  repo_dir=$(config.repos.with_name "$current_repo" | jq -r '.root') 
  echo "$repo_dir"
}

x.commit(){
  local id ans

  id="$(x.get "$@")"
  
  cd "$(x.dir)"
  local remote

  remote=$(git remote)

  read -rp "Commit? " ans
  if [[ $ans =~ [Yy].* ]]; then
    x.update
    git add . && \
    git commit -m "$(x.title "$id")" >/dev/null && \
    echo -n "notebox commited" && \
    [[ -n $remote ]] && git push >/dev/null && \
    echo -n " and pushed"

    echo
  fi
}

x.new() {
  local note_dir id

  id="$(__isosec)" 
  note_dir="$(x.dir)/$id"
  mkdir -p "$note_dir"

  > "$note_dir/README.md"
  command $EDITOR "$note_dir/README.md"

  x.commit "$id"
}

x.search() {
  cd "$(x.dir)"

  local searchterms results

  searchterms="$*"
  results="$( git grep -irl "${searchterms//\ /\.\*}" | grep -E [[:digit:]]+/ )"

  while IFS= read -r line
  do
    local i
    i="${line%%/*}"
    echo "$i $(x.title "$i")"
  done <<< "$results"

}

x.title() {
  local id tittle
  id="$(x.get "$@")"
  
  title="$(head -1 "$id/README.md")"
  echo "${title### }"
}

x.list() {
  cd "$(x.dir)"
  for dir in $(x.list.ids); do
    printf "%s %s\n" "$dir" "$(x.title "$dir")"
  done
}

x.mdindex() {
  cd "$(x.dir)"
  for dir in $(x.list.ids | sort --reverse); do
    printf "* [%s](../%s/README.md)\n" "$(x.title "$dir")" "$dir"
  done
}

_UTCstat() {
  local dir
  dir="$1"
  date --utc --date="$(stat --format="%y" $dir)" +"%Y-%m-%d %H:%M:%SZ"
}

_mdlatest() {
  cd "$(x.dir)"
  for dir in $(x.list.ids | sort --reverse); do
    printf "* %s [%s](../%s/README.md)\n" "$(_UTCstat $dir)" "$(x.title "$dir")" "$dir"
  done
}

x.mdlatest() {
 _mdlatest | sort --reverse
}

x.updateindex.all(){
  cd "$(x.dir)"
  x.mdindex > dex/all.md
}

x.updateindex.latest() {
  cd "$(x.dir)"
  x.mdlatest > dex/latest.md
}

x.updatekeg(){
  cd "$(x.dir)"
  yq ".updated = \"$(date --utc +'%Y-%m-%d %H:%M:%SZ')\"" keg > keg.tmp
  mv keg.tmp keg
}

x.update(){
  x.updateindex.all
  x.updateindex.latest
  x.updatekeg
}

x.list.ids() {
  cd "$(x.dir)"
  local list
  list=$(ls -p1 . | grep -E [[:digit:]]+/)
  list="${list//\//}"
  echo "$list"
}

x.last() {
  x.list.ids | tail -1
}

x.open() {
  local id
  id="$(x.get "$@")"
  
  command $EDITOR "$(x.dir)/$id/README.md"
}

x.edit() {
  local id
  id="$(x.get "$@")"

  x.open "${id##*/}"
  x.commit "$id"

}

x.pull() {
  cd "$(x.dir)" && \
  git pull >/dev/null

  echo "notebox synced"
}

x.mdlink() {
  __line_filter "$@" && return $?

  # TODO: Add support for converting a bare link into a markdown link

  local line id title
  line="$*"
  id="${line%% *}"
  tittle="${line#* }"

  echo "* [$tittle](../$id/README.md)"
}

x.mdreflink() {
  __line_filter "$@" && return $?

  local line id title
  line="$*"
  id="${line%% *}"
  tittle="${line#* }"

  echo "[^1]: ../$id/README.md \"$tittle\""
}

x.ghlink() {
  __line_filter "$@" && return $?

  local line id title
  line="$*"
  id="${line%% *}"

  echo "https://github.com/$GITHUB_USER/notebox/tree/main/$id"
}

x.ghsearch() {
  __line_filter "$@" && return $?

  local search_terms="$*"

  echo "https://github.com/$GITHUB_USER/notebox/search/?q=${search_terms//\ /\+}"
}


#---------------------------------Utils---------------------------------

__isosec(){
  date -u +%Y%m%d%H%M%S
}

__line_filter() {
  [[ -n "$1" ]] && return 1
  while IFS= read -ra args; do
    "${FUNCNAME[1]}" "${args[@]}"
  done
}


#-----------------------completion and delegation-----------------------
#                   use `complete -C nb nb` in bashrc

# Obtain all subcommands
while IFS= read -r line; do
  [[ $line =~ ^declare\ -f\ x\. ]] || continue 
  COMMANDS+=( "${line##declare -f x.}" )
done < <(declare -F)
mapfile -t COMMANDS < <(LC_COLLATE=C sort < <(printf "%s\n" "${COMMANDS[@]}"))

# Completion output
if [[ -n $COMP_LINE  ]]; then
  line=${COMP_LINE#* }
  for c in "${COMMANDS[@]}"; do
    [[ ${c:0:${#line}} == "${line,,}" ]] && echo "$c"
  done
  exit
fi

_init

# Delegation
if [[ -n "$1" ]]; then
  declare CMD="$1"; shift
  for c in "${COMMANDS[@]}"; do
    if [[ $c == "$CMD" ]]; then
      "x.$CMD" "$@"
      exit $?
    fi
  done
fi

echo "nb"
